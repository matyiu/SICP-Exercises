function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
}

// Process generated by an applicative order evaluation
// for gcd(206, 40)
/**
 * gcd(206, 40)
 * gcd(40, 206 % 40)
 * gcd(40, 6)
 * gcd(6, 40 % 6)
 * gcd(6, 4)
 * gcd(4, 6 % 4)
 * gcd(4, 2)
 * gcd(2, 4 % 2)
 * gcd(2, 0)
 * 2
 * 
 * Conclusion: the remainder operation is used 4 times
 */

// Process generated by a normal order evaluation
// for gcd(206, 40)
// gcd(206, 40)
// gcd(40, 206 % 40)
// (206 % 40) === 0
// gcd(206 % 40, (40 % (206 % 40)))
// (40 % (206 % 40)) === 0
// gcd((40 % (206 % 40)), ((206 % 40) % (40 % (206 % 40))))
// ((206 % 40) % (40 % (206 % 40))) === 0
// gcd(((206 % 40) % (40 % (206 % 40))), (40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40))))
// ((40 % (206 % 40)) % ((206 % 40) % (40 % (206 % 40)))) === 0
// ((206 % 40) % (40 % (206 % 40)))
// 2
//
// Conclusion: the remainder is called 18 times